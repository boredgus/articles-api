// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Mailman is an autogenerated mock type for the Mailman type
type Mailman struct {
	mock.Mock
}

type Mailman_Expecter struct {
	mock *mock.Mock
}

func (_m *Mailman) EXPECT() *Mailman_Expecter {
	return &Mailman_Expecter{mock: &_m.Mock}
}

// ConfirmSignupEmail provides a mock function with given fields: email, passcode
func (_m *Mailman) ConfirmSignupEmail(email string, passcode string) {
	_m.Called(email, passcode)
}

// Mailman_ConfirmSignupEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfirmSignupEmail'
type Mailman_ConfirmSignupEmail_Call struct {
	*mock.Call
}

// ConfirmSignupEmail is a helper method to define mock.On call
//   - email string
//   - passcode string
func (_e *Mailman_Expecter) ConfirmSignupEmail(email interface{}, passcode interface{}) *Mailman_ConfirmSignupEmail_Call {
	return &Mailman_ConfirmSignupEmail_Call{Call: _e.mock.On("ConfirmSignupEmail", email, passcode)}
}

func (_c *Mailman_ConfirmSignupEmail_Call) Run(run func(email string, passcode string)) *Mailman_ConfirmSignupEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Mailman_ConfirmSignupEmail_Call) Return() *Mailman_ConfirmSignupEmail_Call {
	_c.Call.Return()
	return _c
}

func (_c *Mailman_ConfirmSignupEmail_Call) RunAndReturn(run func(string, string)) *Mailman_ConfirmSignupEmail_Call {
	_c.Call.Return(run)
	return _c
}

// WelcomeEmail provides a mock function with given fields: email
func (_m *Mailman) WelcomeEmail(email string) {
	_m.Called(email)
}

// Mailman_WelcomeEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WelcomeEmail'
type Mailman_WelcomeEmail_Call struct {
	*mock.Call
}

// WelcomeEmail is a helper method to define mock.On call
//   - email string
func (_e *Mailman_Expecter) WelcomeEmail(email interface{}) *Mailman_WelcomeEmail_Call {
	return &Mailman_WelcomeEmail_Call{Call: _e.mock.On("WelcomeEmail", email)}
}

func (_c *Mailman_WelcomeEmail_Call) Run(run func(email string)) *Mailman_WelcomeEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Mailman_WelcomeEmail_Call) Return() *Mailman_WelcomeEmail_Call {
	_c.Call.Return()
	return _c
}

func (_c *Mailman_WelcomeEmail_Call) RunAndReturn(run func(string)) *Mailman_WelcomeEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMailman creates a new instance of Mailman. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMailman(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mailman {
	mock := &Mailman{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
