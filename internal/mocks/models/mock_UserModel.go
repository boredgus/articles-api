// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	domain "user-management/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserModel is an autogenerated mock type for the UserModel type
type UserModel struct {
	mock.Mock
}

type UserModel_Expecter struct {
	mock *mock.Mock
}

func (_m *UserModel) EXPECT() *UserModel_Expecter {
	return &UserModel_Expecter{mock: &_m.Mock}
}

// Authorize provides a mock function with given fields: user
func (_m *UserModel) Authorize(user domain.User) (string, string, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(domain.User) (string, string, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(domain.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(domain.User) string); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(domain.User) error); ok {
		r2 = rf(user)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UserModel_Authorize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authorize'
type UserModel_Authorize_Call struct {
	*mock.Call
}

// Authorize is a helper method to define mock.On call
//   - user domain.User
func (_e *UserModel_Expecter) Authorize(user interface{}) *UserModel_Authorize_Call {
	return &UserModel_Authorize_Call{Call: _e.mock.On("Authorize", user)}
}

func (_c *UserModel_Authorize_Call) Run(run func(user domain.User)) *UserModel_Authorize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.User))
	})
	return _c
}

func (_c *UserModel_Authorize_Call) Return(_a0 string, _a1 string, _a2 error) *UserModel_Authorize_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *UserModel_Authorize_Call) RunAndReturn(run func(domain.User) (string, string, error)) *UserModel_Authorize_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: user
func (_m *UserModel) Create(user domain.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserModel_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UserModel_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - user domain.User
func (_e *UserModel_Expecter) Create(user interface{}) *UserModel_Create_Call {
	return &UserModel_Create_Call{Call: _e.mock.On("Create", user)}
}

func (_c *UserModel_Create_Call) Run(run func(user domain.User)) *UserModel_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.User))
	})
	return _c
}

func (_c *UserModel_Create_Call) Return(_a0 error) *UserModel_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserModel_Create_Call) RunAndReturn(run func(domain.User) error) *UserModel_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserModel creates a new instance of UserModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserModel {
	mock := &UserModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
