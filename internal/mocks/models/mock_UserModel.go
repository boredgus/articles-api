// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	domain "a-article/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserModel is an autogenerated mock type for the UserModel type
type UserModel struct {
	mock.Mock
}

type UserModel_Expecter struct {
	mock *mock.Mock
}

func (_m *UserModel) EXPECT() *UserModel_Expecter {
	return &UserModel_Expecter{mock: &_m.Mock}
}

// Authorize provides a mock function with given fields: username, password
func (_m *UserModel) Authorize(username string, password string) (string, error) {
	ret := _m.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(username, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserModel_Authorize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authorize'
type UserModel_Authorize_Call struct {
	*mock.Call
}

// Authorize is a helper method to define mock.On call
//   - username string
//   - password string
func (_e *UserModel_Expecter) Authorize(username interface{}, password interface{}) *UserModel_Authorize_Call {
	return &UserModel_Authorize_Call{Call: _e.mock.On("Authorize", username, password)}
}

func (_c *UserModel_Authorize_Call) Run(run func(username string, password string)) *UserModel_Authorize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *UserModel_Authorize_Call) Return(_a0 string, _a1 error) *UserModel_Authorize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserModel_Authorize_Call) RunAndReturn(run func(string, string) (string, error)) *UserModel_Authorize_Call {
	_c.Call.Return(run)
	return _c
}

// ConfirmSignup provides a mock function with given fields: username, passcode
func (_m *UserModel) ConfirmSignup(username string, passcode string) error {
	ret := _m.Called(username, passcode)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmSignup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(username, passcode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserModel_ConfirmSignup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfirmSignup'
type UserModel_ConfirmSignup_Call struct {
	*mock.Call
}

// ConfirmSignup is a helper method to define mock.On call
//   - username string
//   - passcode string
func (_e *UserModel_Expecter) ConfirmSignup(username interface{}, passcode interface{}) *UserModel_ConfirmSignup_Call {
	return &UserModel_ConfirmSignup_Call{Call: _e.mock.On("ConfirmSignup", username, passcode)}
}

func (_c *UserModel_ConfirmSignup_Call) Run(run func(username string, passcode string)) *UserModel_ConfirmSignup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *UserModel_ConfirmSignup_Call) Return(_a0 error) *UserModel_ConfirmSignup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserModel_ConfirmSignup_Call) RunAndReturn(run func(string, string) error) *UserModel_ConfirmSignup_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: issuerRole, userToDeleteOId
func (_m *UserModel) Delete(issuerRole string, userToDeleteOId string) error {
	ret := _m.Called(issuerRole, userToDeleteOId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(issuerRole, userToDeleteOId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserModel_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type UserModel_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - issuerRole string
//   - userToDeleteOId string
func (_e *UserModel_Expecter) Delete(issuerRole interface{}, userToDeleteOId interface{}) *UserModel_Delete_Call {
	return &UserModel_Delete_Call{Call: _e.mock.On("Delete", issuerRole, userToDeleteOId)}
}

func (_c *UserModel_Delete_Call) Run(run func(issuerRole string, userToDeleteOId string)) *UserModel_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *UserModel_Delete_Call) Return(_a0 error) *UserModel_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserModel_Delete_Call) RunAndReturn(run func(string, string) error) *UserModel_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// RequestSignup provides a mock function with given fields: user
func (_m *UserModel) RequestSignup(user domain.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for RequestSignup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserModel_RequestSignup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestSignup'
type UserModel_RequestSignup_Call struct {
	*mock.Call
}

// RequestSignup is a helper method to define mock.On call
//   - user domain.User
func (_e *UserModel_Expecter) RequestSignup(user interface{}) *UserModel_RequestSignup_Call {
	return &UserModel_RequestSignup_Call{Call: _e.mock.On("RequestSignup", user)}
}

func (_c *UserModel_RequestSignup_Call) Run(run func(user domain.User)) *UserModel_RequestSignup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.User))
	})
	return _c
}

func (_c *UserModel_RequestSignup_Call) Return(_a0 error) *UserModel_RequestSignup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserModel_RequestSignup_Call) RunAndReturn(run func(domain.User) error) *UserModel_RequestSignup_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRole provides a mock function with given fields: issuerRole, userToUpdateOId, roleToSet
func (_m *UserModel) UpdateRole(issuerRole string, userToUpdateOId string, roleToSet string) error {
	ret := _m.Called(issuerRole, userToUpdateOId, roleToSet)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(issuerRole, userToUpdateOId, roleToSet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserModel_UpdateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRole'
type UserModel_UpdateRole_Call struct {
	*mock.Call
}

// UpdateRole is a helper method to define mock.On call
//   - issuerRole string
//   - userToUpdateOId string
//   - roleToSet string
func (_e *UserModel_Expecter) UpdateRole(issuerRole interface{}, userToUpdateOId interface{}, roleToSet interface{}) *UserModel_UpdateRole_Call {
	return &UserModel_UpdateRole_Call{Call: _e.mock.On("UpdateRole", issuerRole, userToUpdateOId, roleToSet)}
}

func (_c *UserModel_UpdateRole_Call) Run(run func(issuerRole string, userToUpdateOId string, roleToSet string)) *UserModel_UpdateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserModel_UpdateRole_Call) Return(_a0 error) *UserModel_UpdateRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserModel_UpdateRole_Call) RunAndReturn(run func(string, string, string) error) *UserModel_UpdateRole_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserModel creates a new instance of UserModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserModel {
	mock := &UserModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
