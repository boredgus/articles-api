// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	domain "user-management/internal/domain"

	mock "github.com/stretchr/testify/mock"

	models "user-management/internal/models"
)

// ArticleModel is an autogenerated mock type for the ArticleModel type
type ArticleModel struct {
	mock.Mock
}

type ArticleModel_Expecter struct {
	mock *mock.Mock
}

func (_m *ArticleModel) EXPECT() *ArticleModel_Expecter {
	return &ArticleModel_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: userOId, article
func (_m *ArticleModel) Create(userOId string, article *domain.Article) error {
	ret := _m.Called(userOId, article)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *domain.Article) error); ok {
		r0 = rf(userOId, article)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArticleModel_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ArticleModel_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - userOId string
//   - article *domain.Article
func (_e *ArticleModel_Expecter) Create(userOId interface{}, article interface{}) *ArticleModel_Create_Call {
	return &ArticleModel_Create_Call{Call: _e.mock.On("Create", userOId, article)}
}

func (_c *ArticleModel_Create_Call) Run(run func(userOId string, article *domain.Article)) *ArticleModel_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*domain.Article))
	})
	return _c
}

func (_c *ArticleModel_Create_Call) Return(_a0 error) *ArticleModel_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArticleModel_Create_Call) RunAndReturn(run func(string, *domain.Article) error) *ArticleModel_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: userOId, userRole, articleOId
func (_m *ArticleModel) Delete(userOId string, userRole string, articleOId string) error {
	ret := _m.Called(userOId, userRole, articleOId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(userOId, userRole, articleOId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArticleModel_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ArticleModel_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - userOId string
//   - userRole string
//   - articleOId string
func (_e *ArticleModel_Expecter) Delete(userOId interface{}, userRole interface{}, articleOId interface{}) *ArticleModel_Delete_Call {
	return &ArticleModel_Delete_Call{Call: _e.mock.On("Delete", userOId, userRole, articleOId)}
}

func (_c *ArticleModel_Delete_Call) Run(run func(userOId string, userRole string, articleOId string)) *ArticleModel_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ArticleModel_Delete_Call) Return(_a0 error) *ArticleModel_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArticleModel_Delete_Call) RunAndReturn(run func(string, string, string) error) *ArticleModel_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: articleOId
func (_m *ArticleModel) Get(articleOId string) (domain.Article, error) {
	ret := _m.Called(articleOId)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 domain.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.Article, error)); ok {
		return rf(articleOId)
	}
	if rf, ok := ret.Get(0).(func(string) domain.Article); ok {
		r0 = rf(articleOId)
	} else {
		r0 = ret.Get(0).(domain.Article)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(articleOId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArticleModel_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ArticleModel_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - articleOId string
func (_e *ArticleModel_Expecter) Get(articleOId interface{}) *ArticleModel_Get_Call {
	return &ArticleModel_Get_Call{Call: _e.mock.On("Get", articleOId)}
}

func (_c *ArticleModel_Get_Call) Run(run func(articleOId string)) *ArticleModel_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ArticleModel_Get_Call) Return(_a0 domain.Article, _a1 error) *ArticleModel_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArticleModel_Get_Call) RunAndReturn(run func(string) (domain.Article, error)) *ArticleModel_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetForUser provides a mock function with given fields: username, page, limit
func (_m *ArticleModel) GetForUser(username string, page int, limit int) ([]domain.Article, models.PaginationData, error) {
	ret := _m.Called(username, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetForUser")
	}

	var r0 []domain.Article
	var r1 models.PaginationData
	var r2 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]domain.Article, models.PaginationData, error)); ok {
		return rf(username, page, limit)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []domain.Article); ok {
		r0 = rf(username, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) models.PaginationData); ok {
		r1 = rf(username, page, limit)
	} else {
		r1 = ret.Get(1).(models.PaginationData)
	}

	if rf, ok := ret.Get(2).(func(string, int, int) error); ok {
		r2 = rf(username, page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ArticleModel_GetForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetForUser'
type ArticleModel_GetForUser_Call struct {
	*mock.Call
}

// GetForUser is a helper method to define mock.On call
//   - username string
//   - page int
//   - limit int
func (_e *ArticleModel_Expecter) GetForUser(username interface{}, page interface{}, limit interface{}) *ArticleModel_GetForUser_Call {
	return &ArticleModel_GetForUser_Call{Call: _e.mock.On("GetForUser", username, page, limit)}
}

func (_c *ArticleModel_GetForUser_Call) Run(run func(username string, page int, limit int)) *ArticleModel_GetForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *ArticleModel_GetForUser_Call) Return(_a0 []domain.Article, _a1 models.PaginationData, _a2 error) *ArticleModel_GetForUser_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ArticleModel_GetForUser_Call) RunAndReturn(run func(string, int, int) ([]domain.Article, models.PaginationData, error)) *ArticleModel_GetForUser_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: userOId, userRole, article
func (_m *ArticleModel) Update(userOId string, userRole string, article *domain.Article) error {
	ret := _m.Called(userOId, userRole, article)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *domain.Article) error); ok {
		r0 = rf(userOId, userRole, article)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArticleModel_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ArticleModel_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - userOId string
//   - userRole string
//   - article *domain.Article
func (_e *ArticleModel_Expecter) Update(userOId interface{}, userRole interface{}, article interface{}) *ArticleModel_Update_Call {
	return &ArticleModel_Update_Call{Call: _e.mock.On("Update", userOId, userRole, article)}
}

func (_c *ArticleModel_Update_Call) Run(run func(userOId string, userRole string, article *domain.Article)) *ArticleModel_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*domain.Article))
	})
	return _c
}

func (_c *ArticleModel_Update_Call) Return(_a0 error) *ArticleModel_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArticleModel_Update_Call) RunAndReturn(run func(string, string, *domain.Article) error) *ArticleModel_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateReaction provides a mock function with given fields: raterOId, articleOId, reaction
func (_m *ArticleModel) UpdateReaction(raterOId string, articleOId string, reaction string) error {
	ret := _m.Called(raterOId, articleOId, reaction)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(raterOId, articleOId, reaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArticleModel_UpdateReaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateReaction'
type ArticleModel_UpdateReaction_Call struct {
	*mock.Call
}

// UpdateReaction is a helper method to define mock.On call
//   - raterOId string
//   - articleOId string
//   - reaction string
func (_e *ArticleModel_Expecter) UpdateReaction(raterOId interface{}, articleOId interface{}, reaction interface{}) *ArticleModel_UpdateReaction_Call {
	return &ArticleModel_UpdateReaction_Call{Call: _e.mock.On("UpdateReaction", raterOId, articleOId, reaction)}
}

func (_c *ArticleModel_UpdateReaction_Call) Run(run func(raterOId string, articleOId string, reaction string)) *ArticleModel_UpdateReaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ArticleModel_UpdateReaction_Call) Return(_a0 error) *ArticleModel_UpdateReaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArticleModel_UpdateReaction_Call) RunAndReturn(run func(string, string, string) error) *ArticleModel_UpdateReaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewArticleModel creates a new instance of ArticleModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArticleModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArticleModel {
	mock := &ArticleModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
