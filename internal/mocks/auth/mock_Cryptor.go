// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Cryptor is an autogenerated mock type for the Cryptor type
type Cryptor struct {
	mock.Mock
}

type Cryptor_Expecter struct {
	mock *mock.Mock
}

func (_m *Cryptor) EXPECT() *Cryptor_Expecter {
	return &Cryptor_Expecter{mock: &_m.Mock}
}

// Compare provides a mock function with given fields: hash, comparedStr
func (_m *Cryptor) Compare(hash string, comparedStr string) bool {
	ret := _m.Called(hash, comparedStr)

	if len(ret) == 0 {
		panic("no return value specified for Compare")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(hash, comparedStr)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Cryptor_Compare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compare'
type Cryptor_Compare_Call struct {
	*mock.Call
}

// Compare is a helper method to define mock.On call
//   - hash string
//   - comparedStr string
func (_e *Cryptor_Expecter) Compare(hash interface{}, comparedStr interface{}) *Cryptor_Compare_Call {
	return &Cryptor_Compare_Call{Call: _e.mock.On("Compare", hash, comparedStr)}
}

func (_c *Cryptor_Compare_Call) Run(run func(hash string, comparedStr string)) *Cryptor_Compare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Cryptor_Compare_Call) Return(_a0 bool) *Cryptor_Compare_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cryptor_Compare_Call) RunAndReturn(run func(string, string) bool) *Cryptor_Compare_Call {
	_c.Call.Return(run)
	return _c
}

// Encrypt provides a mock function with given fields: str
func (_m *Cryptor) Encrypt(str string) (string, error) {
	ret := _m.Called(str)

	if len(ret) == 0 {
		panic("no return value specified for Encrypt")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(str)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(str)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(str)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cryptor_Encrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encrypt'
type Cryptor_Encrypt_Call struct {
	*mock.Call
}

// Encrypt is a helper method to define mock.On call
//   - str string
func (_e *Cryptor_Expecter) Encrypt(str interface{}) *Cryptor_Encrypt_Call {
	return &Cryptor_Encrypt_Call{Call: _e.mock.On("Encrypt", str)}
}

func (_c *Cryptor_Encrypt_Call) Run(run func(str string)) *Cryptor_Encrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Cryptor_Encrypt_Call) Return(_a0 string, _a1 error) *Cryptor_Encrypt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Cryptor_Encrypt_Call) RunAndReturn(run func(string) (string, error)) *Cryptor_Encrypt_Call {
	_c.Call.Return(run)
	return _c
}

// NewCryptor creates a new instance of Cryptor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCryptor(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cryptor {
	mock := &Cryptor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
