// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Password is an autogenerated mock type for the Password type
type Password struct {
	mock.Mock
}

type Password_Expecter struct {
	mock *mock.Mock
}

func (_m *Password) EXPECT() *Password_Expecter {
	return &Password_Expecter{mock: &_m.Mock}
}

// Compare provides a mock function with given fields: hash, password
func (_m *Password) Compare(hash string, password string) bool {
	ret := _m.Called(hash, password)

	if len(ret) == 0 {
		panic("no return value specified for Compare")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(hash, password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Password_Compare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compare'
type Password_Compare_Call struct {
	*mock.Call
}

// Compare is a helper method to define mock.On call
//   - hash string
//   - password string
func (_e *Password_Expecter) Compare(hash interface{}, password interface{}) *Password_Compare_Call {
	return &Password_Compare_Call{Call: _e.mock.On("Compare", hash, password)}
}

func (_c *Password_Compare_Call) Run(run func(hash string, password string)) *Password_Compare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Password_Compare_Call) Return(_a0 bool) *Password_Compare_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Password_Compare_Call) RunAndReturn(run func(string, string) bool) *Password_Compare_Call {
	_c.Call.Return(run)
	return _c
}

// Hash provides a mock function with given fields: str
func (_m *Password) Hash(str string) (string, error) {
	ret := _m.Called(str)

	if len(ret) == 0 {
		panic("no return value specified for Hash")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(str)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(str)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(str)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Password_Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hash'
type Password_Hash_Call struct {
	*mock.Call
}

// Hash is a helper method to define mock.On call
//   - str string
func (_e *Password_Expecter) Hash(str interface{}) *Password_Hash_Call {
	return &Password_Hash_Call{Call: _e.mock.On("Hash", str)}
}

func (_c *Password_Hash_Call) Run(run func(str string)) *Password_Hash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Password_Hash_Call) Return(_a0 string, _a1 error) *Password_Hash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Password_Hash_Call) RunAndReturn(run func(string) (string, error)) *Password_Hash_Call {
	_c.Call.Return(run)
	return _c
}

// NewPassword creates a new instance of Password. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPassword(t interface {
	mock.TestingT
	Cleanup(func())
}) *Password {
	mock := &Password{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
