version: "2.23"

services:
  server:
    container_name: ${API_CONTAINER}
    build:
      context: ../
      dockerfile: ./docker/Dockerfile.articles-api
    # volumes:
    #   - ../.:/app
    # command: sleep infinity
    ports:
      - 8080:8080
    depends_on:
      postgres-db:
        condition: service_healthy
      queue:
        condition: service_started

  mailing-service:
    container_name: mailing-service
    build:
      context: ../
      dockerfile: ./docker/Dockerfile.mailing-service
    ports:
      - 8081:8081
    depends_on:
      queue:
        condition: service_started

  # mysql-db:
  #   container_name: ${MYSQL_CONTAINER}
  #   image: mysql:8.0
  #   restart: always
  #   ports:
  #     - 3306:3306
  #   environment:
  #     - MYSQL_ROOT_PASSWORD=${MYSQL_PASSWORD}
  #     - MYSQL_HOST=${MYSQL_CONTAINER}
  #     - MYSQL_DATABASE=${MYSQL_DATABASE}
  #   volumes:
  #     - db:/var/lib/mysql
  #   healthcheck:
  #     test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
  #     interval: 5s
  #     retries: 10
  
  postgres-db:
    container_name: ${POSTGRESQL_CONTAINER}
    image: postgres:16.2-bullseye
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=${POSTGRESQL_DB}
      - POSTGRES_USER=${POSTGRESQL_USER}
      - POSTGRES_PASSWORD=${POSTGRESQL_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "articlesdb", "-U", "postgres"]
      interval: 5s
  
  clickhouse-db:
    container_name: ${CLICKHOUSE_CONTAINER}
    image: clickhouse/clickhouse-server:23-alpine
    restart: always
    ports:
      - ${CLICKHOUSE_PORT}:${CLICKHOUSE_PORT}/tcp
      - 9000:9000/tcp
    environment:
      - CLICKHOUSE_DB=${CLICKHOUSE_DATABASE}
      - CLICKHOUSE_USER=${CLICKHOUSE_USERNAME}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}
    volumes:
      - clickhouse-data:/var/log/clickhouse/
      - clickhouse-logs:/var/log/clickhouse-server/

  cache:
    container_name: ${REDIS_CONTAINER}
    image: redis:7.2.3-alpine
    restart: always
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    command: >
      --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
  
  grafana:
    image: grafana/grafana-enterprise:10.4.0
    container_name: grafana
    restart: unless-stopped
    ports: 
      - 3000:3000
    volumes:
      - grafana-data:/var/lib/grafana
      - ../config/grafana:/etc/grafana/provisioning
  
  prometheus:
    image: prom/prometheus:v2.51.0
    container_name: prometheus
    ports:
      - 9090:9090
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - prometheus-data:/prometheus
      - ../config/prometheus.yml:/etc/prometheus/prometheus.yml

  node_exporter:
    image: quay.io/prometheus/node-exporter:v1.7.0
    container_name: node_exporter
    command: '--path.rootfs=/host'
    restart: unless-stopped
    volumes:
      - /:/host:ro,rslave
  
  queue:
    image: rabbitmq:3.13.1-alpine
    container_name: ${RABBITMQ_CONTAINER}
    ports:
      - ${RABBITMQ_PORT}:${RABBITMQ_PORT}
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}


volumes:
  db:
  clickhouse-data:
  clickhouse-logs:
  redis-data:
  postgres-data:
  grafana-data:
  prometheus-data:
